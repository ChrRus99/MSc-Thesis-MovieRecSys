"""State management for the movie graph.

This module defines the state structures used in the movie graph. It includes the definition for
RecommendationAgentState, which is an extended version of the InputState.
"""

import pandas as pd
from dataclasses import dataclass, field
from typing import Annotated, Literal, TypedDict, Optional, List, Dict, Tuple, Any

from app.shared.state import InputState


class Movie(TypedDict):
    """Movie data structure."""
    movie_title: str
    """The title of the movie."""
    rating: float
    """The rating given to the movie (from 1 to 5)."""
    timestamp: int
    """The timestamp when the movie was rated."""


# This is the primary state of your agent, where you can store any information.
@dataclass(kw_only=True)
class RecommendationAgentState(InputState):
    """State of the movie graph / agent."""
    
    # New user-movie ratings
    new_user_movie_ratings: List[Movie] = field(default_factory=list)
    """The list of new user-movie ratings."""

    # Last active agent
    last_active_agent: Optional[Annotated[Literal["movie_information", "movie_recommendation"], "last_active_agent"]] = None
    """The last active agent that was used in the conversation."""

    # Information retrieval
    information: Dict[str, Any] = field(default_factory=dict)
    """The dictionary containing the information retrieved by the information agent."""

    # Recommended movies
    recommended_movies_df: pd.DataFrame = field(default_factory=pd.DataFrame)
    """The DataFrame containing the recommended movies."""
    movies: List[str] = field(default_factory=list)
    """The list of movie titles recommended by the recommendation agent."""
    explanations: Dict[str, str] = field(default_factory=dict)
    """The dictionary containing explanations for each recommended movie."""

    # User feedback evaluation
    report : List[str] = field(default_factory=list)
    """The report about the user's response satisfaction generated by the evaluation agent for the last active agent."""
    is_user_satisfied: bool = False
    """A flag indicating whether the user is satisfied with the previous response."""
    has_user_other_questions: bool = False
    """A flag indicating whether the user has other questions."""
    user_preferences: List[str] = field(default_factory=list)
    """The list of user preferences provided by the evaluation agent."""
    mood: List[str] = field(default_factory=list)
    """The user's mood or temporary state extracted from feedback."""  
    
