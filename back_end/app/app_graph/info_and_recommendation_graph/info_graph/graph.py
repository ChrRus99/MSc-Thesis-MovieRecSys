# info_and_recommendation_graph/info_graph/graph.py

import copy
from typing import Any, Annotated, Literal, TypedDict, cast

from langgraph.graph import END, START, StateGraph
from langgraph.types import Command, interrupt
from langchain_core.messages import BaseMessage, SystemMessage, HumanMessage, AIMessage, ToolMessage
from langchain_core.runnables import RunnableConfig

from app.app_graph.configuration import AgentConfiguration
from app.app_graph.state import RecommendationAgentState, InputState

from app.agents.query_analyzer_agent import create_query_analyzer_agent
from app.agents.utils import format_agent_structured_output
from app.app_graph.prompts import ANALYZE_AND_ROUTE_INFO_RETRIEVAL_SYSTEM_PROMPT

from app.shared.utils import load_chat_model
from app.shared.debug_utils import (
    state_log,
    tool_log,
    log_node_state_after_return,
)


@log_node_state_after_return
async def analyze_and_route_query(
    state: RecommendationAgentState, *, config: RunnableConfig
) -> Command[Literal["kg_rag", "web_search"]]:
    # Retrieve the report generated by the evaluation agent (if any)
    # TODO
    
    ### Analyze the query and route it to the appropriate agent
    
    # Load agent's configuration settings
    configuration = AgentConfiguration.from_runnable_config(config)
    model = load_chat_model(configuration.query_model)

    # Create a query_analyzer agent
    query_analyzer_agent = create_query_analyzer_agent(
        state=state,
        prompt=ANALYZE_AND_ROUTE_INFO_RETRIEVAL_SYSTEM_PROMPT,
        llm=model,
        verbose=True
    )

    # Extract the last user message
    user_message = state.messages[-1]

    # Invoke the query_analyzer agent with the user message and chat history
    structured_response = await query_analyzer_agent.ainvoke({
        "input": user_message.content, 
        "chat_history": [] #state.messages[:-1]  # Pass chat history (excluding the last message)
    })
    
    # Extract the structured response from the agent's output
    structured_response_dict = format_agent_structured_output(structured_response["output"])
    agent_messages = structured_response_dict["messages"]
    route = structured_response_dict["route"]
    state.messages.extend(agent_messages)  # Update the state

    # Return the structured routing result
    return Command(
        update={
            "messages": state.messages,
            # "user_id": state.user_id,
            # "is_user_registered": state.is_user_registered
        },
        goto=route
    )



@log_node_state_after_return
async def kg_rag(
    state: RecommendationAgentState, *, config: RunnableConfig
) -> Command[Literal["", ""]]:
    pass


@log_node_state_after_return
async def web_search(
    state: RecommendationAgentState, *, config: RunnableConfig
) -> Command[Literal["", ""]]:
    pass