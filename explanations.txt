----------------------------------------------------------------------------------------------------

MECHANISM: Dictionary to Configuration conversion.

FOLDER: rag_agent/shared
FILE: configuration.py
CLASS: BaseConfiguration
FUNCTION: from_runnable_config
USED IN: graph.py

DESCRIPTION: this function simplifies the process of initializing configuration objects, allowing
             them to be populated with settings from a structured configuration dictionary easily. 
             It encapsulates the configuration setup logic within the class, making the 
             configuration management more modular and less error-prone.

EXAMPLE:
    # (1) Configuration from file:
    {
        "configurable": {
            "embedding_model": "openai/text-embedding-3-large",
            "retriever_provider": "elastic",
            "search_kwargs": {
                "top_k": 5,
                "filter": "specific"
            }
        }
    }
    
    # (2) Usage:
    index_config = BaseConfiguration.from_runnable_config(config_data)
    
    # (3) Resulting Configuration Object:
    BaseConfiguration(
        embedding_model="openai/text-embedding-3-large",
        retriever_provider="elastic",
        search_kwargs={"top_k": 5, "filter": "specific"}
    )

EXPLANATION: The final purpose of from_runnable_config is to take a dictionary (contained within a 
             RunnableConfig object) and transform it into a properly initialized instance of 
             BaseConfiguration (or a subclass). 

----------------------------------------------------------------------------------------------------

MECHANISM: Dictionary to State Conversion.

FOLDER: rag_agent/retrieval_graph
FILE: state.py
CLASS: AgentState
USED IN: graph.py

DESCRIPTION: the dictionary to state conversion mechanism allows structured data to be passed 
             throughout the retrieval graph nodes. The process transforms raw input dictionaries 
             into AgentState instances, enabling type-safe and modular handling of state data 
             within the system.

EXAMPLE:
    # (1) Raw input data:
    {
        "messages": [{"role": "user", "content": "What is AI?"}],
        "router": {"type": "langchain", "logic": "technology question"},
        "steps": ["analyze-query", "retrieve-documents"],
        "documents": []
    }

    # (2) Usage:
    state = AgentState(**input_data)

    # (3) Resulting State Object:
    AgentState(
        messages=[{"role": "user", "content": "What is AI?"}],
        router=Router(type="langchain", logic="technology question"),
        steps=["analyze-query", "retrieve-documents"],
        documents=[]
    )

EXPLANATION: The dictionary to state mechanism uses dataclass field matching and automatic unpacking
             (**kwargs) to convert input dictionaries into instances of AgentState. This 
             transformation is handled transparently within the langgraph framework, allowing 
             seamless input handling for graph nodes.

----------------------------------------------------------------------------------------------------
